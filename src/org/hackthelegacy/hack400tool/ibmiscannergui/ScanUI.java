//    "hack400tool"
//    - security handling tools for IBM Power Systems (formerly known as AS/400)
//    Copyright (C) 2010-2016  Bart Kulach
//    This file, ScanUI.java, is part of hack400tool package.

//    "hack400tool" is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.

//    "hack400tool" is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.

//   You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
package org.hackthelegacy.hack400tool.ibmiscannergui;

import org.hackthelegacy.hack400tool.ibmiscannercore.TextAreaOutputStream;
import com.ibm.as400.access.ObjectList;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.hackthelegacy.hack400tool.ibmiscannercore.IBMiConnector;
import org.hackthelegacy.hack400tool.ibmiscannercore.SqliteDbConnector;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

public class ScanUI extends javax.swing.JFrame {

    private IBMiConnector testSystem;
    public SqliteDbConnector dbConnection;
    private ByteArrayOutputStream bstdout, bstderr;
    private PrintStream stdouterr;
    private String jarPath;
    private File jarFile;
    
    /**
     * Creates new form APIsetup
     */
    public ScanUI() throws IOException {
        jarFile = new File(ScanUI.class.getProtectionDomain().getCodeSource().getLocation().getPath());
        jarPath = jarFile.getParentFile().getPath();
        initComponents();
        String fileName = new SimpleDateFormat("YYMMddHHmmSS").format(new Date());
        stdouterr = new PrintStream(new TextAreaOutputStream(logTextArea, "", jarPath 
                                    + File.separator + "log" + File.separator + fileName + ".log"));
        System.setErr(stdouterr);
        System.setOut(stdouterr);       

        Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, jarPath);
        
        
        dbConnection = new SqliteDbConnector("IBMiScanner.db");        
        try {
            DefaultTableModel tableModel = dbConnection.query("SELECT id AS 'ID', description AS 'Description' FROM settingdetails;").toTableModel();
            settingsTable.setModel(tableModel);
            settingsTable.getColumnModel().getColumn(0).setResizable(false);
            settingsTable.getColumnModel().getColumn(0).setMaxWidth(30);
            settingsTable.getColumnModel().getColumn(1).setResizable(false);            
            
        } catch (Exception ex) {
            Logger.getLogger(ScanUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        systemName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        useSSL = new javax.swing.JCheckBox();
        scanButton = new javax.swing.JButton();
        outputDirFolderTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        browseDirsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        settingsTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        selectAllButton = new javax.swing.JButton();
        deselectAllButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        temporaryLibTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jScrollPane2 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        useJDBC = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        escalateToComboBox = new javax.swing.JComboBox();
        escalateButton = new javax.swing.JButton();
        DeescalateButton = new javax.swing.JButton();
        escalateToTextField = new javax.swing.JTextField();
        useGUI = new javax.swing.JCheckBox();
        useSockets = new javax.swing.JCheckBox();
        useNetSockets = new javax.swing.JCheckBox();
        proxyTextField = new javax.swing.JTextField();
        useProxy = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        createSubfolderCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(900, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 650));

        jLabel2.setText("IP address or DNS name:");

        useSSL.setText("Use SSL");

        scanButton.setText("Run scan");
        scanButton.setEnabled(false);
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        outputDirFolderTextField.setText(jarPath + File.separator + "output");

        jLabel6.setText("Directory to store output:");

        browseDirsButton.setText("Browse...");
        browseDirsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDirsButtonActionPerformed(evt);
            }
        });

        settingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        settingsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(settingsTable);

        jLabel7.setText("Select tests to be performed:");

        selectAllButton.setText("Select all");
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        deselectAllButton.setText("Deselect all");
        deselectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllButtonActionPerformed(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.setEnabled(false);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Temporary library:");

        temporaryLibTextField.setText("HACK400");

        jLabel9.setText("Username:");

        jLabel10.setText("Password:");

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane2.setViewportView(logTextArea);

        jLabel11.setText("Log:");

        useJDBC.setText("Use JDBC");

        jLabel1.setText("Escalate to:");

        escalateButton.setText("Escalate");
        escalateButton.setEnabled(false);
        escalateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escalateButtonActionPerformed(evt);
            }
        });

        DeescalateButton.setText("Deescalate");
        DeescalateButton.setEnabled(false);
        DeescalateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeescalateButtonActionPerformed(evt);
            }
        });

        escalateToTextField.setText("QSECOFR");

        useGUI.setText("Use login GUI");

        useSockets.setText("Use Sockets");

        useNetSockets.setText("Use NetSockets");

        useProxy.setText("Use proxy");

        jLabel3.setText("Proxy IP or DNS:");

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        createSubfolderCheckBox.setSelected(true);
        createSubfolderCheckBox.setText("Create new subfolder for the scanned machine (folder name = system name)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(createSubfolderCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(proxyTextField)
                                        .addComponent(systemName, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(useProxy)
                                    .addGap(41, 41, 41)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(useSockets)
                                        .addComponent(useSSL))))
                            .addComponent(useGUI))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useJDBC)
                            .addComponent(useNetSockets))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel8)
                                    .addComponent(jButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(passwordField)
                                    .addComponent(temporaryLibTextField)
                                    .addComponent(escalateToComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(escalateToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DeescalateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(escalateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(outputDirFolderTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1))
                                .addGap(42, 42, 42))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(deselectAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(scanButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(browseDirsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(escalateButton)
                        .addGap(4, 4, 4)
                        .addComponent(DeescalateButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(temporaryLibTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(escalateToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(escalateToComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(systemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(proxyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(useSSL)
                            .addComponent(useJDBC)
                            .addComponent(useProxy))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(useGUI)
                            .addComponent(useSockets)
                            .addComponent(useNetSockets))))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputDirFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseDirsButton))
                .addGap(1, 1, 1)
                .addComponent(createSubfolderCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(selectAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deselectAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scanButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    
    if (!disconnectButton.isEnabled()) return;
    
    try {
            testSystem.disconnect();
        } catch (Exception ex) {
            Logger.getLogger(ScanUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        try {
            testSystem.disconnect();
        } catch (Exception ex) {
            Logger.getLogger(ScanUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        connectButton.setEnabled(true);
        disconnectButton.setEnabled(false);
        scanButton.setEnabled(false);
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        final SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    connectButton.setEnabled(false);
                    String passwordString = new String(passwordField.getPassword());
                    if (useProxy.isSelected()) {
                        testSystem = new IBMiConnector(systemName.getText(), useSSL.isSelected(), useJDBC.isSelected(), 
                                useGUI.isSelected(), useSockets.isSelected(), useNetSockets.isSelected(),
                            temporaryLibTextField.getText(), userNameField.getText(),
                            passwordString, true, proxyTextField.getText());
                    }
                    else {            
                        testSystem = new IBMiConnector(systemName.getText(), useSSL.isSelected(), useJDBC.isSelected(), 
                                useGUI.isSelected(), useSockets.isSelected(), useNetSockets.isSelected(),
                            temporaryLibTextField.getText(), userNameField.getText(),
                            passwordString);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(ScanUI.class.getName()).log(Level.SEVERE, null, ex);
                    connectButton.setEnabled(true);
                    return null;
                }
                disconnectButton.setEnabled(true);
                connectButton.setEnabled(false);
                if (settingsTable.getSelectedRowCount() > 0)
                scanButton.setEnabled(true);
                escalateButton.setEnabled(true);        

                return null;
            }
        };

        mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {
           public void propertyChange(PropertyChangeEvent evt) {
           }
        });
        mySwingWorker.execute();

        
    }//GEN-LAST:event_connectButtonActionPerformed

    private void deselectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllButtonActionPerformed
        settingsTable.clearSelection();
        scanButton.setEnabled(false);
    }//GEN-LAST:event_deselectAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        settingsTable.selectAll();
        if (disconnectButton.isEnabled())
        scanButton.setEnabled(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void settingsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsTableMouseClicked
        if (settingsTable.getSelectedRowCount() > 0 && disconnectButton.isEnabled())
        scanButton.setEnabled(true);
    }//GEN-LAST:event_settingsTableMouseClicked

    private void browseDirsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDirsButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        fileChooser.setSelectedFile(new File(outputDirFolderTextField.getText()));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);

        int folderSelection = fileChooser.showSaveDialog(this);

        if (folderSelection == JFileChooser.APPROVE_OPTION) {
            File dirToSave = fileChooser.getSelectedFile();
            outputDirFolderTextField.setText(dirToSave.getAbsolutePath());
        }
    }//GEN-LAST:event_browseDirsButtonActionPerformed

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed

        /* Definitions from table settingdetails:
        function_type::={API,CLCMD,SHELLCMD, method}
        output_type::={PRINT,OUTFILE,STMF_TEXT, STMF_BIN,stdout, binary, <function call>}

        CLCMD + PRINT: output_params::=SPLF name
        CLCMD + OUTFILE: output_params::=LIB/FILE(MBR)
        CLCMD + STMF_BIN,STMF_TEXT: output_params::=/path/to/file
        API + BIN: output_params::=<parsing methods>
        METHOD + <output_function>: output_params::= <class for output cast>
        SHELLCMD + STMF_BIN,STMF_TEXT: output_params::=/path/to/file
        SHELLCMD + STDOUT: output_params::=<null>
        */
        if (settingsTable.getSelectedRowCount() < 1 || outputDirFolderTextField.getText() == "") {
            JOptionPane.showMessageDialog(null, "The path is not correct or no scan settings were selected!", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String outputDirectory = (createSubfolderCheckBox.isSelected() ? 
                                    outputDirFolderTextField.getText() + File.separator + systemName.getText() : 
                                    outputDirFolderTextField.getText());
        
        scanButton.setEnabled(false);
        final SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    Thread runThread = new Thread() {
                        public void run() {
                            Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, "Initializing scan...");
                            try {
                                for (int selectedRow : settingsTable.getSelectedRows()) {
                                    DefaultTableModel detailSettings = dbConnection.query(
                                        "SELECT function_type, function_call, num_input_params, input_params,"
                                        + "output_type, output_params, output_filename FROM settingdetails WHERE id='"
                                        + settingsTable.getModel().getValueAt(selectedRow, 0).toString() + "'").toTableModel();
                                    if (detailSettings.getRowCount() < 1) {
                                        JOptionPane.showMessageDialog(null, "Error occured while getting details of scan parameters from the database", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
                                        return;
                                    }
                                        Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, "Running scan: "
                                            + (String)settingsTable.getModel().getValueAt(selectedRow, 1));
                                        switch (((String)detailSettings.getValueAt(0, 0)).toUpperCase()) /*function_type*/ {
                                            case "CLCMD":
                                                Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, "Running command " + (String)detailSettings.getValueAt(0, 1));
                                                String outputMessages = testSystem.runCLCommand(
                                                    (String)detailSettings.getValueAt(0, 1) +
                                                    ((int)detailSettings.getValueAt(0, 2) == 0 ? "" :
                                                        (" " + (String)detailSettings.getValueAt(0, 3)))); /*function_call*/
                                                Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, outputMessages);
                                                switch (((String)detailSettings.getValueAt(0, 4)).toUpperCase()) /*output_type*/{
                                                    case "PRINT": /*output_params*/
                                                    testSystem.getSpoolFileToDOCX(outputDirectory + File.separator + 
                                                        systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                        (String)detailSettings.getValueAt(0, 5));
                                                    break;
                                                    case "OUTFILE":
                                                    testSystem.exportToXLSX2(outputDirectory + File.separator + 
                                                        systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                        testSystem.getPhysicalFileMemberAsTable2((String)detailSettings.getValueAt(0, 5)));
                                                    break;
                                                    case "STMF_TEXT":
                                                    testSystem.exportToDOCX(outputDirectory + File.separator + 
                                                        systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                        testSystem.getIFSTextFile((String)detailSettings.getValueAt(0, 5)));
                                                    break;
                                                    case "STMF_BIN":
                                                    testSystem.exportToBinaryFile(outputDirectory + File.separator + 
                                                        systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                        testSystem.getIFSBinaryFile((String)detailSettings.getValueAt(0, 5)));
                                                    break;
                                                    default:
                                                    testSystem.exportToDOCX(outputDirectory + File.separator + 
                                                        systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                        outputMessages);
                                                    break;
                                                }
                                                break;
                                                case "SHELLCMD":
                                                    /*Not supported yet*/
                                                break;
                                                case "METHOD":
                                                    Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, "Running method " + (String)detailSettings.getValueAt(0, 1));
                                                    switch ((String)detailSettings.getValueAt(0, 1)) {
                                                        case "getAuthorisationMatrix":
                                                            testSystem.exportToXLSX2(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getAuthorisationMatrix2());
                                                        break;
                                                        case "getAllSystemValues":
                                                        testSystem.exportToXLSX(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getAllSystemValues());
                                                        break;
                                                        case "getAllAuthorisationLists":
                                                        testSystem.exportToXLSX(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getAllAuthorisationLists());
                                                        break;
                                                        case "getAllLibraries":
                                                        testSystem.exportToXLSX(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getAllLibraries());
                                                        break;
                                                        case "getAllQSYSCommands":
                                                        testSystem.exportToXLSX(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getAllQSYSCommands());
                                                        break;
                                                        case "getAllFolderFiles":
                                                        testSystem.exportToXLSX(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getAuthoritiesForObjects(ObjectList.ALL, (String)detailSettings.getValueAt(0, 3), "*FILE"));
                                                        break;
                                                        case "getPhysicalFile":
                                                        testSystem.exportToXLSX(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getPhysicalFileMemberAsTable((String)detailSettings.getValueAt(0, 3)));
                                                        break;
                                                        case "getJohnPasswordsLM":
                                                        testSystem.getJohnPasswordsLM(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6));
                                                        break;
                                                        case "getJohnPasswordsDES":
                                                        testSystem.getJohnPasswordsDES(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6));
                                                        break;
                                                        case "getJohnPasswordsSHAUpperCase":
                                                        testSystem.getJohnPasswordsSHAUpperCase(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6));
                                                        break;
                                                        case "getJohnPasswordsSHAMixedCase":
                                                        testSystem.getJohnPasswordsSHAMixedCase(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6));
                                                        break;
                                                        case "getPTFs":
                                                            testSystem.exportToXLSX2(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getPTFs2());
                                                        break;
                                                        case "netStat":                            
                                                            testSystem.exportToXLSX2(outputDirectory + File.separator + 
                                                            systemName.getText() + "-" + (String)detailSettings.getValueAt(0, 6),
                                                            testSystem.getNetStat());    
                                                        default:
                                                        break;
                                                    }
                                                    default:
                                                    case "API":
                                                    break;
                                                }
                                                    Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, "Done ("
                                                        + (String)settingsTable.getModel().getValueAt(selectedRow, 1) + ")");
                                                }

                                                Logger.getLogger(ScanUI.class.getName()).log(Level.INFO, "Test finished. Check directory "
                                                    + outputDirectory + " for output files.");

                                                testSystem.exportToDOCX(outputDirectory + File.separator + "joblog.docx",
                                                    testSystem.getJobLog()
                                                    + "\n\nSTDOUT + STDERR:\n\n" + logTextArea.getText());

                                                scanButton.setEnabled(true);
                                            } catch (Exception ex) {
                                                Logger.getLogger(ScanUI.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }
                        };
                    runThread.start();
                } catch (Exception ex) {
                    Logger.getLogger(HackUI.class.getName()).log(Level.SEVERE, null, ex);
                    connectButton.setEnabled(true);
                    disconnectButton.setEnabled(false);
                }                    
                return null;
            }
        };

        mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
            }
        });
        mySwingWorker.execute();

    }//GEN-LAST:event_scanButtonActionPerformed

    private void escalateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escalateButtonActionPerformed
        try {
            DeescalateButton.setEnabled(testSystem.escalatePrivilegeWithoutPassword(escalateToTextField.getText(), IBMiConnector.PASSWORD_TYPE_NOPWD));
        } catch (Exception ex) {
            Logger.getLogger(HackUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_escalateButtonActionPerformed

    private void DeescalateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeescalateButtonActionPerformed
        try {
            DeescalateButton.setEnabled(testSystem.deescalatePrivileges());       
        } catch (Exception ex) {
            Logger.getLogger(HackUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeescalateButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            escalateToComboBox.setModel(new DefaultComboBoxModel(testSystem.getEscalationUsers().toArray()));
        } catch (Exception ex) {
            Logger.getLogger(HackUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScanUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScanUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScanUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScanUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ScanUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ScanUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeescalateButton;
    private javax.swing.JButton browseDirsButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JCheckBox createSubfolderCheckBox;
    private javax.swing.JButton deselectAllButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton escalateButton;
    private javax.swing.JComboBox escalateToComboBox;
    private javax.swing.JTextField escalateToTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField outputDirFolderTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField proxyTextField;
    private javax.swing.JButton scanButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JTable settingsTable;
    private javax.swing.JTextField systemName;
    private javax.swing.JTextField temporaryLibTextField;
    private javax.swing.JCheckBox useGUI;
    private javax.swing.JCheckBox useJDBC;
    private javax.swing.JCheckBox useNetSockets;
    private javax.swing.JCheckBox useProxy;
    private javax.swing.JCheckBox useSSL;
    private javax.swing.JCheckBox useSockets;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables
}
