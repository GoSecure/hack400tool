BEGIN TRANSACTION;
CREATE TABLE sqlcommands(id varchar(30) primary key not null,sqlcommand varchar(100) not null);
INSERT INTO `sqlcommands` VALUES ('settingsList','SELECT * FROM settingtypes;');
CREATE TABLE settingtypes(settingtypeid INTEGER PRIMARY KEY NOT NULL, settingtypename VARCHAR(20) NOT NULL);
INSERT INTO `settingtypes` VALUES (1,'General');
INSERT INTO `settingtypes` VALUES (2,'Scan options');
CREATE TABLE settings(id integer primary key not null, parentid integer, settingtypeid integer not null, setingname varchar(20), settingnamedesc varchar(250), enabled boolean);
INSERT INTO `settings` VALUES (1,NULL,1,'Test check','Test check desc',0);
CREATE TABLE settingdetails(id integer primary key not null, parentid integer, settingid integer, description varchar(200), function_type varchar(20), function_call varchar(200), num_input_params integer, input_params varchar(800), output_type varchar(20), output_params varchar(800), output_filename varchar(100) not null, checkbydefault boolean not null);
INSERT INTO `settingdetails` VALUES (1,NULL,NULL,'SECURITY: Get full authorisation matrix','METHOD','getAuthorisationMatrix',0,NULL,'exportToXLSX','DefaultTableModel','IST-matrix.xlsx',1);
INSERT INTO `settingdetails` VALUES (2,NULL,NULL,'SECURITY: Get system values and network parameters','METHOD','getAllSystemValues',0,NULL,'exportToXLSX','DefaultTableModel','system_values.xlsx',1);
INSERT INTO `settingdetails` VALUES (3,NULL,NULL,'SECURITY: Get SST users','CLCMD','DSPSSTUSR',1,'OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/SSTUSER)','OUTFILE','%CURLIB%/SSTUSER','sst_users.xlsx',1);
INSERT INTO `settingdetails` VALUES (4,NULL,NULL,'INFO: Get all currently running jobs','CLCMD','WRKACTJOB',1,'OUTPUT(*PRINT)','PRINT','QPDSPAJB','current_jobs.docx',1);
INSERT INTO `settingdetails` VALUES (5,NULL,NULL,'INFO: Get all hardware resources','CLCMD','DSPHDWRSC',1,'TYPE(*AHW) OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/ALLHWRSC) OUTFILFMT(*TYPE2)','OUTFILE','%CURLIB%/ALLHWRSC','hardware_resources.xlsx',1);
INSERT INTO `settingdetails` VALUES (6,NULL,NULL,'INFO: Get communication resources','CLCMD','DSPHDWRSC',1,'TYPE(*CMN) OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/CMNHWRSC) OUTFILFMT(*TYPE2)','OUTFILE','%CURLIB%/CMNHWRSC','communication_resources.xlsx',1);
INSERT INTO `settingdetails` VALUES (7,NULL,NULL,'INFO: Show status of communication lines','CLCMD','WRKCFGSTS',1,'CFGTYPE(*LIN) OUTPUT(*PRINT)','PRINT','QSYSPRT','comm_lines_status.docx',1);
INSERT INTO `settingdetails` VALUES (8,NULL,NULL,'SECURITY: Display all network attributes','CLCMD','DSPNETA',1,'OUTPUT(*PRINT)','PRINT','QPDSPNET','network_attributes.docx',1);
INSERT INTO `settingdetails` VALUES (9,NULL,NULL,'INFO: Get software list','CLCMD','DSPSFWRSC',1,'OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/ALLSFWRSC)','OUTFILE','%CURLIB%/ALLSFWRSC','software_list.xlsx',1);
INSERT INTO `settingdetails` VALUES (10,NULL,NULL,'INFO: Get PTF list','CLCMD','DSPPTF',1,'OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/ALLPTFS)','OUTFILE','%CURLIB%/ALLPTFS','PTF_list.xlsx',1);
INSERT INTO `settingdetails` VALUES (11,NULL,NULL,'SECURITY: Display GRANTED TO user permissions (if any)','CLCMD','DSPUSRPMN',1,'USER(*ALL) OUTPUT(*PRINT)','PRINT','QGDSPUPU','grantedto_permissions.docx',1);
INSERT INTO `settingdetails` VALUES (12,NULL,NULL,'SECURITY: Display GRANTED FROM user permissions (if any)','CLCMD','DSPUSRPMN',1,'USER(*ALL) GRANTED(*FROM) OUTPUT(*PRINT)','PRINT','QGDSPUPU','grantedfrom_permissions.docx',1);
INSERT INTO `settingdetails` VALUES (13,NULL,NULL,'SECURITY: Display JOBD permissions','CLCMD','PRTJOBDAUT',1,'LIB(*ALL)','PRINT','QPSECJOBD','JOBD_permissions.docx',1);
INSERT INTO `settingdetails` VALUES (14,NULL,NULL,'SECURITY: Display QUEUE permissions','CLCMD','PRTQAUT',1,'LIB(*ALL)','PRINT','QPSECQ','QUEUE_permissions.docx',1);
INSERT INTO `settingdetails` VALUES (15,NULL,NULL,'INFO: Get list of AUTL objects (authorisation lists)','CLCMD','DSPOBJD',1,'OBJ(*ALL/*ALL) OBJTYPE(*AUTL) OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/AUTLDESC)','OUTFILE','%CURLIB%/AUTLDESC','AUTL_list.xlsx',1);
INSERT INTO `settingdetails` VALUES (16,NULL,NULL,'INFO: Get list of libraries','CLCMD','DSPOBJD',1,'OBJ(QSYS/*ALL) OBJTYPE(*LIB) OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/LIBDESC)','OUTFILE','%CURLIB%/LIBDESC','libraries.xlsx',1);
INSERT INTO `settingdetails` VALUES (17,NULL,NULL,'SECURITY: Display all authority holders (if any)','CLCMD','DSPAUTHLR',1,'OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/AUTHLDRS)','OUTFILE','%CURLIB%/AUTHLDRS','authority_holders.xlsx',1);
INSERT INTO `settingdetails` VALUES (18,NULL,NULL,'INFO: Display QSYS commands','CLCMD','DSPOBJD',1,'OBJ(QSYS/*ALL) OBJTYPE(*CMD) OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/CMDDESC)','OUTFILE','%CURLIB%/CMDDESC','QSYS_commands.xlsx',1);
INSERT INTO `settingdetails` VALUES (19,NULL,NULL,'SECURITY: Display User Objects','CLCMD','DSPOBJD',1,'OBJ(QSYS/*ALL) OBJTYPE(*USRPRF) OUTPUT(*OUTFILE) OUTFILE(%CURLIB%/USRDESC)','OUTFILE','%CURLIB%/USRDESC','QSYS_users.xlsx',1);
INSERT INTO `settingdetails` VALUES (20,NULL,NULL,'SECURITY: Display scheduled jobs','CLCMD','WRKJOBSCDE',1,'OUTPUT(*PRINT) PRTFMT(*FULL)','PRINT','QSYSPRT','scheduled_jobs.docx',1);
INSERT INTO `settingdetails` VALUES (21,NULL,NULL,'SECURITY: Display audit journal (QAUDJRN) settings','CLCMD','WRKJRNA',1,'JRN(QAUDJRN) OUTPUT(*PRINT)','PRINT','QPDSPJNA','audit_journal_settings.docx',1);
INSERT INTO `settingdetails` VALUES (22,NULL,NULL,'SECURITY: Display objects with adopted authority (by user)','CLCMD','PRTADPOBJ',1,'USRPRF(*ALL)','PRINT','QPSECADP','adopted_authority_objects.docx',1);
INSERT INTO `settingdetails` VALUES (23,NULL,NULL,'SECURITY: Display exit point (function) usage','CLCMD','DSPFCNUSG',1,'OUTPUT(*PRINT)','PRINT','QPFCNUSG','function_usage.docx',1);
INSERT INTO `settingdetails` VALUES (24,NULL,NULL,'SECURITY: Get all libraries','METHOD','getAllLibraries',0,NULL,'exportToXLSX','DefaultTableModel','all_libraries.xlsx',1);
INSERT INTO `settingdetails` VALUES (25,NULL,NULL,'SECURITY: Get all QSYS commands','METHOD','getAllQSYSCommands',0,NULL,'exportToXLSX','DefaultTableModel','all_qsys_commands.xlsx',1);
INSERT INTO `settingdetails` VALUES (26,NULL,NULL,'SECURITY: Get John the Ripper hashes (LM hash)','METHOD','getJohnPasswordsLM',0,NULL,NULL,NULL,'lmhashes.txt',1);
INSERT INTO `settingdetails` VALUES (27,NULL,NULL,'SECURITY: Get John the Ripper hashes (SHA-1 hash uppercase)','METHOD','getJohnPasswordsSHAUpperCase',0,NULL,NULL,NULL,'SHA-uc-hashes.txt',1);
INSERT INTO `settingdetails` VALUES (28,NULL,NULL,'SECURITY: Get John the Ripper hashes (SHA-1 hash mixed case)','METHOD','getJohnPasswordsSHAMixedCase',0,NULL,NULL,NULL,'SHA-mc-hashes.txt',1);
INSERT INTO `settingdetails` VALUES (29,NULL,NULL,'SECURITY: Get John the Ripper hashes (DES)','METHOD','getJohnPasswordsDES',0,NULL,NULL,NULL,'DES-hashes.txt',1);
INSERT INTO `settingdetails` VALUES (30,NULL,NULL,'SECURITY: Get all PTFs','METHOD','getPTFs',0,'NULL','exportToXLSX','DefaultTableModel','ALLPTFs2.xlsx',1);
COMMIT;
